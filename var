close_fds.c:45:		if (tmp->fd_in > 0 && tmp->fd_in != STDIN_FILENO)
close_fds.c:47:			if (close(tmp->fd_in) < 0)
close_fds.c:48:				perror(tmp->file_in);
close_fds.c:50:		if (tmp->fd_out > 0 && tmp->fd_out != STDOUT_FILENO
close_fds.c:51:			&& tmp->fd_out != STDERR_FILENO)
close_fds.c:53:			if (close(tmp->fd_out) < 0)
close_fds.c:54:				perror(tmp->file_out);
close_fds.c:56:		tmp = tmp->next;
cut_sentence.c:94:		if (tmp->word[0] == '|')
cut_sentence.c:96:			if (!tmp->next)
cut_sentence.c:102:			else if (tmp->next->word[0] == '|')
cut_sentence.c:109:		tmp = tmp->next;
do_dup.c:24:	if (tmp->fd_in > 0)
do_dup.c:25:		err_dup_r = dup2(tmp->fd_in, STDIN_FILENO);
do_dup.c:28:	if (tmp->fd_out > 0)
do_dup.c:29:		err_dup_w = dup2(tmp->fd_out, STDOUT_FILENO);
do_dup.c:43:	if (access(tmp->program, F_OK | X_OK) < 0)
do_dup.c:45:		perror(tmp->program);
do_dup.c:50:	else if (tmp->program[2] == '\0')
do_dup.c:59:		execve(tmp->program, tmp->args, init->envp);
do_dup.c:60:		printf("%s: %s\n", tmp->program, strerror(EISDIR));
do_dup.c:70:	if (tmp->cmd || tmp->program || init->nb_pipe)
do_dup.c:75:	if (tmp->cmd)
do_dup.c:77:		execve(tmp->prog, tmp->args, init->envp);
do_dup.c:78:		printf("%s: %s\n", tmp->prog, strerror(EISDIR));
do_dup.c:82:	else if (tmp->program)
do_dup_utils.c:24:		if (j != i && tmp->fd_in > 0)
do_dup_utils.c:26:			if (close(tmp->fd_in) < 0)
do_dup_utils.c:27:				perror(tmp->file_in);
do_dup_utils.c:29:		if (j != i && tmp->fd_out > 0)
do_dup_utils.c:31:			if (close(tmp->fd_out) < 0)
do_dup_utils.c:32:				perror(tmp->file_out);
do_dup_utils.c:34:		tmp = tmp->next;
do_dup_utils.c:60:	if (tmp->fd_in > 0)
do_dup_utils.c:62:		if (close(tmp->fd_in) < 0)
do_dup_utils.c:63:			perror(tmp->file_in);
do_dup_utils.c:70:	if (tmp->fd_out > 0)
do_dup_utils.c:72:		if (close(tmp->fd_out) < 0)
do_dup_utils.c:73:			perror(tmp->file_out);
do_dup_utils.c:100:	if (tmp->fd_in < 0 || tmp->fd_out < 0)
do_dup_utils.c:103:		if (init->nb_pipe || tmp->cmd || tmp->program)
do_dup_utils.c:110:	if (tmp->cmd)
env_var.c:21:		str = ft_strdup(tmp->word);
env_var.c:52:	if (tmp->word[*i] == '$' && (tmp->word[*i + 1] == '\0'
env_var.c:53:			||tmp->word[*i + 1] == '"' || tmp->word[*i + 1] == '\''))
env_var.c:57:	else if (tmp->word[*i] == '$')
env_var.c:59:		tmp->var = 1;
env_var.c:60:		if (check_variable(i, tmp->word, init, &var))
env_var.c:63:	else if (tmp->word[*i] == '"' || tmp->word[*i] == '\'')
env_var.c:84:		while (tmp->word[i])
env_var.c:87:			if (tmp->word[i] && tmp->word[i] != '$')
env_var.c:93:			free(tmp->word);
env_var.c:94:			tmp->word = ft_strdup(str);
env_var.c:96:			if (!tmp->word)
env_var.c:101:		printf("DEBUG word: (%s)\n", tmp->word);
env_var.c:102:		tmp = tmp->next;
heredoc.c:48:		write(tmp->fd_heredoc[1], line, ft_strlen(line));
heredoc.c:49:		write(tmp->fd_heredoc[1], "\n", 1);
is_cd.c:19:	if (tmp->args[1])
is_cd.c:21:		if (chdir(tmp->args[1]) < 0)
is_cd.c:24:			perror(tmp->args[1]);
is_cmd.c:53:	if (access(tmp->cmd, F_OK | X_OK) >= 0)
is_cmd.c:55:		tmp->prog = ft_strdup(tmp->cmd);
is_cmd.c:56:		if (!tmp->prog)
is_cmd.c:63:	else if (tmp->cmd[0] == '/')
is_cmd.c:65:		printf("%s: %s\n", tmp->cmd, strerror(ENOENT));
is_cmd.c:69:		tmp->prog = get_access(init->path, tmp->cmd);
is_cmd.c:70:	if (!tmp->prog)
is_env.c:22:		if (!init->nb_pipe && tmp->fd_out)
is_env.c:24:			if (write(tmp->fd_out, init->env->str, ft_strlen(init->env->str))
is_env.c:27:			if (write(tmp->fd_out, "\n", 1) < 0)
is_pwd.c:22:	if (!init->nb_pipe && tmp->fd_out)
is_pwd.c:24:		if (write(tmp->fd_out, pwd, ft_strlen(pwd)) < 0)
is_pwd.c:26:		if (write(tmp->fd_out, "\n", 1) < 0)
lexer.c:94:		if (tmp->word[0] == '#')
lexer.c:99:			tmp = tmp->next;
parent_process.c:27:		if (!tmp->cmd && !tmp->builtin && !tmp->program)
parent_process.c:29:		else if (init->nb_pipe || tmp->cmd || tmp->program)
parent_process.c:31:			waitpid(tmp->pid, &wstatus, 0);
parent_process.c:39:		tmp = tmp->next;
pipes.c:42:	if (tmp->cmd || tmp->program || init->nb_pipe)
pipes.c:44:		tmp->pid = fork();
pipes.c:45:		if (tmp->pid < 0)
pipes.c:49:		if (tmp->pid == 0)
pipes.c:71:		if (tmp->cmd || tmp->builtin || tmp->program)
pipes.c:77:		tmp = tmp->next;
pipes.c:87:	if (ft_strlen(tmp->word) > 1)
pipes.c:95:		return (free(tmp->word), NULL);
quotes.c:20:	while (tmp->word[*i] && tmp->word[*i] != '"'
quotes.c:21:		&& tmp->word[*i] != '\'' && tmp->word[*i] != '$')
quotes.c:26:		*var = ft_substr(tmp->word, &j, *i - j + 1);
quotes.c:38:	while (tmp->word[*i] && tmp->word[*i] != '"' && tmp->word[*i] != '$')
quotes.c:42:		*var = ft_substr(tmp->word, &j, *i - j);
quotes.c:51:	if (tmp->word [*i + 1] == '$' && (tmp->word[*i + 2] == '"'
quotes.c:52:			|| tmp->word[*i + 2] == '\''))
quotes.c:57:	else if (tmp->word [*i] == '"')
quotes.c:66:		while (tmp->word[*i] && tmp->word[*i] != '\'')
quotes.c:68:		*var = ft_substr(tmp->word, &j, *i - j);
search_variable.c:24:		if (ft_strnstr(tmp->str, var_name, len) && tmp->str[len] == '=')
search_variable.c:27:			*var = ft_substr(tmp->str, &len, ft_strlen(tmp->str) - len);
search_variable.c:32:		tmp = tmp->next;
split_word.c:20:	after = tmp->next;
split_word.c:48:	str = ft_split_spaces(tmp->word);
split_word.c:51:	free(tmp->word);
split_word.c:55:	tmp->word = ft_strdup(str[0]);
split_word.c:56:	if (!tmp->word)
split_word.c:74:		printf("DEBUG var: %d\n", tmp->var);
split_word.c:75:		if (tmp->var)
split_word.c:80:		tmp = tmp->next;
variable.c:18:	init->var->str = ft_strdup(tmp->str);
variable.c:19:	free(tmp->str);
variable.c:27:	init->env->str = ft_strdup(tmp->str);
variable.c:28:	free(tmp->str);
variable.c:39:	len = var_len(tmp->str);
variable.c:47:		if (ft_strncmp(init->var->str, tmp->str, len) == 0
variable.c:66:	len = var_len(tmp->str);
variable.c:69:		if (ft_strncmp(init->env->str, tmp->str, len) == 0
